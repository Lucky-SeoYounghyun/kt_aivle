import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
import xgboost as xgb
import pandas as pd
from sklearn.cluster import KMeans
import numpy as np
import matplotlib.payplot as plt
import seaborn as sns
-----------------------------------------------------------
def train_and_predict_missing_values(df, target_column):
    # 결측치가 있는 행과 없는 행으로 분리
    train_data = df[df[target_column].notnull()]
    test_data = df[df[target_column].isnull()]
    
    if len(test_data) == 0:
        return df  # 결측치가 없는 경우 예측할 필요가 없음
    
    # 변수 분리~
    X_train = train_data.drop(columns=[target_column])
    y_train = train_data[target_column]
    X_test = test_data.drop(columns=[target_column])
    
    X_train_encoded = pd.get_dummies(X_train, drop_first=True)
    X_test_encoded = pd.get_dummies(X_test, drop_first=True)

    # 학습 데이터와 테스트 데이터의 열을 동일하게 맞춤
    X_train_encoded, X_test_encoded = X_train_encoded.align(X_test_encoded, join='left', axis=1, fill_value=0)
    
    # 타겟 변수 레이블 인코딩
    le = LabelEncoder()
    y_train_encoded = le.fit_transform(y_train)
    
    model = xgb.XGBClassifier()
    model.fit(X_train_encoded, y_train_encoded)

    y_pred_encoded = model.predict(X_test_encoded)
    
    y_pred = le.inverse_transform(y_pred_encoded)

    df.loc[df[target_column].isnull(), target_column] = y_pred
    return df

-------------------------------------------------------------


# 파이프라인 만들기
def data_pipeline(data):
    apt01 = data.copy()
    
    categorical_columns_with_nan = ['건물형태', '난방방식', '승강기설치여부']
        
    for col in categorical_columns_with_nan:
        apt01 = train_and_predict_missing_values(apt01, col)

    apt01['준공연도'] = apt01['준공일자'].astype(str).str[:4].astype(int)
    apt01['총면적'] = (apt01['전용면적'] + apt01['공용면적']) * apt01['전용면적별세대수']

    apt01.drop(columns = '준공일자', inplace=True)

    data01 = apt01[['단지코드', '총세대수', '지역', '준공연도', '건물형태', '난방방식', '승강기설치여부', '실차량수']]

    data01.drop_duplicates(inplace=True)
    
    data01.reset_index(drop=True, inplace=True)
    
    data02 = apt01[['단지코드', '총면적', '전용면적별세대수', '전용면적', '공용면적', '임대보증금', '임대료']]
    
    df_area = data02.groupby('단지코드')['총면적'].sum().reset_index()

    bins = [10, 30, 40, 50, 60, 70, 80, 90, 140]
    labels = ['면적16_26', '면적26_38', '면적38_46', '면적46_51', '면적51_59', '면적59_74', '면적74_85', '면적85_127', '면적127_140']
    data02['전용면적구간'] = pd.cut(data02['전용면적'], bins=bins, labels=labels, right=False)
    
    temp = data02.groupby(['단지코드', '전용면적구간'])['전용면적별세대수'].sum().reset_index()

    df_pivot = temp.pivot(index='단지코드', columns='전용면적구간', values='전용면적별세대수')
    df_pivot.columns.name = None
    df_pivot.reset_index(inplace=True)

    df_rent = data02.groupby('단지코드')[['임대보증금', '임대료']].mean().reset_index()

    base_data = pd.merge(data01, df_area, on='단지코드', how='left')
    base_data = pd.merge(base_data, df_pivot, on='단지코드', how='left')
    base_data = pd.merge(base_data, df_rent, on='단지코드', how='left')

    base_data['난방방식'] = base_data['난방방식'].replace(
        {
        '개별가스난방': '개별',
        '개별유류난방': '개별',
        '지역난방': '지역',
        '지역가스난방': '지역',
        '지역유류난방': '지역',
        '중앙가스난방': '중앙',
        '중앙난방': '중앙',
        '중앙유류난방': '중앙'
        }
    )
    base_data['난방방식']

    base_data['승강기설치여부'] = base_data['승강기설치여부'].replace({'전체동 설치':1, '일부동 설치':0, '미설치':0})

    base_data.drop(columns=['단지코드', '지역'], inplace = True)
